@page "/hd/insert"

@rendermode RenderMode.InteractiveServer

@using System.Drawing
@using System.Drawing.Imaging
@using Newtonsoft.Json;
@using System.Text;
@using kaizenITSM.Domain.Entities.hd
@using kaizenITSM.Domain.Entities.account
@using kaizenITSM.Domain.ViewModels.account

@inject HttpClient _httpClient;
@inject ILogger<Tickets> _logger
@inject NavigationManager _navigationManager
@inject DialogService _dialogService

<RadzenDialog />

@if (data == null)
{
    <Load />
}
else
{
    <div class="row mt-2">
        <div class="col-8 offset-2">
            <div class="card">
                <div class="card-body">
                    <div class="card-header">
                        <h3>Nowe zgłoszenie</h3>
                    </div>
                </div>
                <div class="card-text p-2">
                    <div class="row mt-0">
                        <div class="col-12">
                            <RadzenAlert Variant="Variant.Filled" AlertStyle="AlertStyle.Primary" Shade="Shade.Dark"
                                            AllowClose="false" Visible="@errorVisible" Size="AlertSize.Small">
                                <RadzenLabel Text="@errorMessage">
                                </RadzenLabel>
                            </RadzenAlert>
                        </div>
                    </div>
                    <EditForm Model=@data OnValidSubmit="OnSubmit" OnInvalidSubmit="OnInvalidSubmit">
                        <DataAnnotationsValidator />
                        <div class="row mt-1">
                            <div class="col-6">
                                <RadzenFormField Text="Typ zgłoszenia" Class="w-100">
                                    <RadzenDropDown @bind-Value="data.TypeOfTicketID" AllowClear="true" Name="typeOfTicketID" Class="w-100"
                                                    Data="@typesOfTicket" TextProperty="Description" ValueProperty="ID"
                                                    AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    FilterOperator="StringFilterOperator.Contains">
                                    </RadzenDropDown>
                                </RadzenFormField>
                            </div>
                            <div class="col-6">
                                <RadzenFormField Text="Status" Class="w-100">
                                    <RadzenDropDown @bind-Value="data.Status" AllowClear="true" Name="status" Class="w-100"
                                                    Data="@ticketStatusValues" TextProperty="Disclaimer" ValueProperty="Status"
                                                    AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    FilterOperator="StringFilterOperator.Contains">
                                    </RadzenDropDown>
                                </RadzenFormField>
                            </div>
                        </div>
                        <div class="row mt-1">
                            <div class="col-6">
                                <RadzenFormField Text="Źródło" Class="w-100">
                                    <RadzenDropDown @bind-Value="data.TicketSourceID" AllowClear="true" Name="ticketSource" Class="w-100"
                                                    Data="@ticketsSource" TextProperty="Name" ValueProperty="ID"
                                                    AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    FilterOperator="StringFilterOperator.Contains">
                                    </RadzenDropDown>
                                </RadzenFormField>
                            </div>
                            <div class="col-6">
                                <RadzenFormField Text="Pilność" Class="w-100">
                                    <RadzenDropDown @bind-Value="data.PriorityOfTicketID" AllowClear="true" Name="priorityOfTicket" Class="w-100"
                                                    Data="@prioritiesOfTicket" TextProperty="Description" ValueProperty="ID"
                                                    AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    FilterOperator="StringFilterOperator.Contains">
                                    </RadzenDropDown>
                                </RadzenFormField>
                            </div>
                        </div>
                        <div class="row mt-1">
                            <div class="col-6">
                                <RadzenFormField Text="Grupa" Class="w-100">
                                    <RadzenDropDown @bind-Value="data.GroupID" AllowClear="true" Name="group" Class="w-100"
                                                    Data="@groups" TextProperty="Description" ValueProperty="ID" AllowVirtualization="true"
                                                    AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    FilterOperator="StringFilterOperator.Contains" Change="@(args => { OnGroupsChange(data.GroupID); })">
                                    </RadzenDropDown>
                                </RadzenFormField>
                            </div>
                            <div class="col-6">
                                <RadzenFormField Text="Kategoria" Class="w-100">
                                    <RadzenDropDown @bind-Value="data.TicketCategoryID" AllowClear="true" Name="ticketCategory" Class="w-100"
                                                    Data="@ticketsCategory" TextProperty="Name" ValueProperty="ID" AllowVirtualization="true"
                                                    AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    FilterOperator="StringFilterOperator.Contains">
                                    </RadzenDropDown>
                                </RadzenFormField>
                            </div>
                        </div>
                        <div class="row mt-1">
                            <div class="col-12">
                                    <RadzenFormField Text="Osoba odpowiedzialna" Class="w-100">
                                        @if (users == null)
                                        {
                                            <div class="pt-1">
                                                <RadzenLabel Text="wybierz najpierw grupę">
                                                </RadzenLabel>
                                        </div>
                                        }
                                    else
                                        {
                                            <RadzenDropDown @bind-Value=@userList Data=@users TextProperty="UserName" ValueProperty="ID" Name="usersList"
                                                            Multiple="true" AllowClear="true" Chips="true" Class="w-100"
                                                            AllowVirtualization="true" MaxSelectedLabels="7" SelectAllText="Wybierz wszystkich" />
                                        }
                                    </RadzenFormField>
                            </div>
                        </div>
                        <div class="row mt-1">
                            <div class="col-12">
                                <RadzenFormField Text="Temat" Class="w-100">
                                    <RadzenTextBox @bind-Value="data.Topic" AllowClear="true" Name="topic" Class="w-100" @oninput=@(args => OnChange())>
                                    </RadzenTextBox>
                                </RadzenFormField>
                            </div>
                        </div>
                        <div class="row mt-1">
                            <div class="col-12">
                                <RadzenFormField Text="Opis" Class="w-100">
                                    <RadzenHtmlEditor @bind-Value=@ticketDisclaimer style="height: 250px;" UploadUrl="upload/image">
                                        <RadzenHtmlEditorUndo />
                                        <RadzenHtmlEditorRedo />
                                        <RadzenHtmlEditorSeparator />
                                        <RadzenHtmlEditorFontName />
                                        <RadzenHtmlEditorFontSize />
                                        <RadzenHtmlEditorFormatBlock />
                                        <RadzenHtmlEditorSeparator />
                                        <RadzenHtmlEditorAlignLeft />
                                        <RadzenHtmlEditorAlignCenter />
                                        <RadzenHtmlEditorAlignRight />
                                        <RadzenHtmlEditorJustify />
                                        <RadzenHtmlEditorSeparator />
                                        <RadzenHtmlEditorIndent />
                                        <RadzenHtmlEditorOutdent />
                                        <RadzenHtmlEditorUnorderedList />
                                        <RadzenHtmlEditorOrderedList />
                                        <RadzenHtmlEditorSeparator />
                                        <RadzenHtmlEditorBold />
                                        <RadzenHtmlEditorItalic />
                                        <RadzenHtmlEditorUnderline />
                                        <RadzenHtmlEditorStrikeThrough />
                                        <RadzenHtmlEditorSeparator />
                                        <RadzenHtmlEditorColor />
                                        <RadzenHtmlEditorBackground />
                                        <RadzenHtmlEditorRemoveFormat />
                                        <RadzenHtmlEditorSeparator />
                                        <RadzenHtmlEditorSubscript />
                                        <RadzenHtmlEditorSuperscript />
                                        <RadzenHtmlEditorSeparator />
                                        <RadzenHtmlEditorLink />
                                        <RadzenHtmlEditorUnlink />
                                        <RadzenHtmlEditorImage />
                                    </RadzenHtmlEditor>
                                </RadzenFormField>
                            </div>
                        </div>
                        <div class="row mt-1">
                            <div class="col-12">
                                <RadzenLabel Text="Załączniki">
                                </RadzenLabel>
                            </div>
                        </div>
                        <div class="row mt-1">
                            <div class="col-12">
                                <RadzenUpload @ref="upload" Auto="false" Multiple="true" Url="upload/multiple" class="w-100"
                                              InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select file" }})" 
                                              ChooseText="Wybierz plik"/>
                            </div>
                        </div>
                        <div class="row mt-5 mb-3">
                            <div class="col-12">
                                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem">
                                    <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Medium" Variant="Variant.Flat"
                                                  Icon="save" ButtonStyle="ButtonStyle.Primary" Text="Zapisz" />
                                    <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium"
                                                  Icon="cancel" Text="Anuluj" Click="@OnClose" />
                                </RadzenStack>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool errorVisible = false;
    private string? errorMessage = string.Empty;

    RadzenUpload upload;
    private IList<int>? userList = new int[] { };
    private string? uploadImage { get; set; }
    string fileName;
    long? fileSize;
    string htmlValue = "";

    private Tickets data = new Tickets();

    private IEnumerable<TypesOfTicket> typesOfTicket;
    private IEnumerable<PrioritiesOfTicket> prioritiesOfTicket;
    private IEnumerable<TicketStatusValues> ticketStatusValues;
    private IEnumerable<TicketsCategory> ticketsCategory;
    private IEnumerable<TicketsSource> ticketsSource;

    private IEnumerable<Groups> groups;
    private IEnumerable<UserGroupsViewModel>? users;

    private string? ticketDisclaimer;

    protected override async Task OnInitializedAsync()
    {
        typesOfTicket = await _httpClient.GetFromJsonAsync<IEnumerable<TypesOfTicket>>($"TypesOfTickets/Select?Status=A");
        prioritiesOfTicket = await _httpClient.GetFromJsonAsync<IEnumerable<PrioritiesOfTicket>>($"PrioritiesOfTickets/Select?Status=A");
        ticketStatusValues = await _httpClient.GetFromJsonAsync<IEnumerable<TicketStatusValues>>($"TicketStatusValues/Select?Status=A");
        ticketsCategory = await _httpClient.GetFromJsonAsync<IEnumerable<TicketsCategory>>($"TicketsCategories/Select?Status=A");
        ticketsSource = await _httpClient.GetFromJsonAsync<IEnumerable<TicketsSource>>($"TicketsSources/Select?Status=A");

        groups = await _httpClient.GetFromJsonAsync<IEnumerable<Groups>>($"Groups/Select?Status=A"); 
        users = await _httpClient.GetFromJsonAsync<IEnumerable<UserGroupsViewModel>>($"Users/SelectByGroup/{0}?Status=A");
    }

    private async void OnGroupsChange(int? ID)
    {
        if (ID != null)
        {
            users = Task.Run(async () => await _httpClient.GetFromJsonAsync<IEnumerable<UserGroupsViewModel>>($"Users/SelectByGroup/{ID}?Status=A")).Result;
        }
    }

    private async void OnSubmit(EditContext context)
    {
        _logger.LogInformation("Ticket Create Submit");

        try
        {
            data.Disclaimer = ticketDisclaimer;

            StringContent content = new StringContent(JsonConvert.SerializeObject(data), Encoding.UTF8, "application/json");

            var response = await _httpClient.PostAsync("Tickets/Insert", content);
            string apiResponse = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                var newObject = JsonConvert.DeserializeObject<Tickets>(apiResponse);

                upload.Url = $"upload/{newObject.ID}";

                upload.Upload();

                foreach(int id in userList)
                {
                    TicketAssignmentUsers tau = new TicketAssignmentUsers();

                    tau.TicketID = newObject.ID;
                    tau.UserID = id;

                    StringContent content2= new StringContent(JsonConvert.SerializeObject(tau), Encoding.UTF8, "application/json");

                    var response2 = await _httpClient.PostAsync("TicketAssignmentUsersController/Insert", content2);
                    string apiResponse2 = await response2.Content.ReadAsStringAsync();
                }

                _navigationManager.NavigateTo("/hd");
            }
            else
            {
                errorMessage = response.RequestMessage.ToString();
                errorVisible = true;
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            errorVisible = true;
        }
    }

    private void OnInvalidSubmit(EditContext context)
    {
        errorMessage = "Popraw wszystkie błędy";
        errorVisible = true;
    }

    void OnClose()
    {
        _navigationManager.NavigateTo("/hd");
    }

    void OnChange()
    {
        errorVisible = false;
    }
}
