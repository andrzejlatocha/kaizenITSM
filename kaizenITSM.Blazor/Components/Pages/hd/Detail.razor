@page "/hd/detail/{ID:int}"

@rendermode RenderMode.InteractiveServer

@using kaizenITSM.Domain.Entities.account
@using kaizenITSM.Domain.Entities.hd
@using kaizenITSM.Domain.Enumerators.hd
@using kaizenITSM.Domain.ViewModels.account
@using kaizenITSM.Domain.ViewModels.hd
@using kaizenITSM.Blazor.Components.Shared.hd

@inject HttpClient _httpClient;

@inject NavigationManager _navigationManager
@inject DialogService _dialogService

<RadzenDialog />

<div class="row ms-2">
    <div class="col-12">
        <div class="row mt-2">
            <div class="col-9">
                <RadzenStack Orientation="Orientation.Horizontal" Gap="1.5rem" JustifyContent="JustifyContent.Normal" 
                             AlignItems="AlignItems.Normal" class="w-100">
                    <RadzenButton Variant="Variant.Outlined" Text="" Icon="@("<i class=\"fa fa-backward\"></i>")"
                                  ButtonStyle="ButtonStyle.Primary" Click="@OnReturn" />
                    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.Normal"
                                 class="w-100">
                        <RadzenButton Variant="Variant.Outlined" Text="Popraw" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" />
                        <RadzenButton Variant="Variant.Outlined" Text="Zamknij" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" />
                        <RadzenButton Variant="Variant.Outlined" Text="Anuluj" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" />
                        <RadzenButton Variant="Variant.Outlined" Text="Podejmij" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" />
                        <RadzenButton Variant="Variant.Outlined" Text="Przydziel" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" />
                    </RadzenStack>
                    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.End">
                        <RadzenDropDown @bind-Value=@ticketMenu Data=@ticketDetailsMenu TextProperty="Title" ValueProperty="ID"
                                        Placeholder="Działania" Change="@OnMenuChange" Style="width: 200px;">
                        </RadzenDropDown>
                    </RadzenStack>
                </RadzenStack>
            </div>
            <div class="col-3">
            </div>
        </div>
        <div class="row mt-1">
            <div class="col-9">
                <div class="row mt-4">
                    <div class="col-12">
                        @if (data == null)
                        {
                            <LoadSmall />
                        }
                        else
                        {
                            <div class="float-left me-2 pt-2">
                                <img src=@String.Format("images/ticket/type/{0}-48.png", @data.Icon) />
                            </div>
                            <div class="float-left">
                                <p class="fs-2 fw-bold m-0">@data.Topic</p>
                                <div class="d-inline-block text-mutted fs-6">
                                    Priorytet: @data.Priority
                                </div>
                                <div class="d-inline-block text-mutted fs-6 ms-4">
                                    Zgłaszający: @data.User
                                </div>
                                <div class="d-inline-block text-mutted fs-6">
                                    @data.Date
                                </div>
                            </div>
                            <div class="float-end pt-3">
                                <RadzenButton Variant="Variant.Outlined" Icon="description" ButtonStyle="ButtonStyle.Secondary" Click="OnInsertNote" />
                            </div>
                        }
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-12">
                        <RadzenTabs @bind-SelectedIndex="tabsSelectedIndex" TabPosition="TabPosition.Top" RenderMode="TabRenderMode.Client" class="w-100">
                            <Tabs>
                                <RadzenTabsItem Text="Rozmowa">
                                    <div class="row w-100">
                                        <div class="col-12">
                                            @if (actions == null)
                                            {
                                                <Load />
                                            }
                                            else
                                            {
                                                foreach (ActionsViewModel action in actions)
                                                {
                                                    if (dateGroup != action.DateGroup)
                                                    {
                                                        <div class="row mb-2">
                                                            <div class="col-1">
                                                                <p class="badge text-bg-secondary text-wrap w-100 p-2">@action.DateGroup</p>
                                                            </div>
                                                            <div class="col-11">
                                                            </div>
                                                        </div>
                                                    }
                                                    <div class="row">
                                                        <div class="col-1">
                                                            <img src=@String.Format("images/action_type/{0}-32.png", action.Icon) />
                                                        </div>
                                                        <div class="col-11">
                                                            <div class="card w-100">
                                                                <div class=@String.Format("card-header action-type-{0}", action.ActionTypeID)>
                                                                    <span class=@String.Format("action-type-text-{0}", action.ActionTypeID)>@action.User</span>
                                                                    <span class="ms-1">@action.DateDecription</span>
                                                                    <span><img src=@String.Format("images/attachment/{0}.png", action.Attachment) /></span>
                                                                </div>
                                                                <div class=@String.Format("action-type-{0}", action.ActionTypeID)>
                                                                    <div class="card-body action-body">
                                                                        <h4 class="card-title">@action.Title</h4>
                                                                        <p class="card-text mt-1">
                                                                            @((MarkupString)action.Information)
                                                                        </p>
                                                                        <div class="mt-2">
                                                                            <ActionFiles ActionID="ID" />
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                                <div class="card-footer text-body-secondary">
                                                                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Left" Gap="0.1rem">
                                                                        @if (0 == 0)
                                                                        {
                                                                            var actionID = action.ID;
                                                                            var actionTypeID = action.ActionTypeID;

                                                                            @if (action.ActionTypeID == 5 || action.ActionTypeID == 0)
                                                                            {
                                                                                <RadzenButton Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.ExtraSmall"
                                                                                              Icon="@("<i class=\"fa fa-reply\"></i>")" Click="e => OnReply(actionID)" />
                                                                                <RadzenButton Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.ExtraSmall"
                                                                                              Icon="@("<i class=\"fa fa-reply-all\"></i>")" Click="e => OnReplyAll(actionID)" />
                                                                                <RadzenButton Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.ExtraSmall"
                                                                                              Icon="@("<i class=\"fa fa-forward\"></i>")" Click="e => OnForward(actionID)" />
                                                                                <RadzenButton Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.ExtraSmall"
                                                                                Icon="@("<i class=\"fa fa-envelope\"></i>")" Click="e => OnSend(actionID)" />
                                                                            }
                                                                            else
                                                                            {
                                                                                <RadzenButton Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.ExtraSmall"
                                                                                              Icon="@("<i class=\"fa fa-pen\"></i>")" Click="e => OnEdit(actionID, actionTypeID)" />

                                                                            }
                                                                            <RadzenButton Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.ExtraSmall"
                                                                                          Icon="@("<i class=\"fa fa-trash\"></i>")" Click="e => OnDelete(actionID)" />
                                                                        }
                                                                    </RadzenStack>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            }
                                        </div>
                                    </div>
                                </RadzenTabsItem>
                                <RadzenTabsItem Text="Szczegóły">
                                </RadzenTabsItem>
                                <RadzenTabsItem Text="Zadania">
                                </RadzenTabsItem>
                                <RadzenTabsItem Text="Rozwiązanie">
                                </RadzenTabsItem>
                                <RadzenTabsItem Text="Akceptacje">
                                </RadzenTabsItem>
                                <RadzenTabsItem Text="Rejestr pracy">
                                </RadzenTabsItem>
                            </Tabs>
                        </RadzenTabs>
                    </div>
                </div>
            </div>
            <div class="col-3">
                @if (data == null)
                {
                    <LoadSmall />
                }
                else
                {
                    <div class="card w-100">
                        <div class="card-body">
                            <div class="row mt-4">
                                <div class="col-4">
                                    <h5>Identyfikator</h5>
                                </div>
                                <div class="col-8">
                                    <h5>@String.Format("#{0}", @data.ID)</h5>
                                </div>
                            </div>
                            <div class="row mt-2">
                                <div class="col-12">
                                    <RadzenFormField Text="Status" Class="w-100">
                                        <RadzenDropDown @bind-Value="data.Status" AllowClear="true" Name="status" Class="w-100"
                                                        Data="@ticketStatusValues" TextProperty="Disclaimer" ValueProperty="Status"
                                                        AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                        FilterOperator="StringFilterOperator.Contains">
                                        </RadzenDropDown>
                                    </RadzenFormField>
                                </div>
                            </div>
                            <div class="row mt-2">
                                <div class="col-12">
                                    <RadzenFormField Text="Typ zgłoszenia" Class="w-100">
                                        <RadzenDropDown @bind-Value="data.TypeOfTicketID" AllowClear="true" Name="typeOfTicketID" Class="w-100"
                                                        Data="@typesOfTicket" TextProperty="Description" ValueProperty="ID"
                                                        AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                        FilterOperator="StringFilterOperator.Contains">
                                        </RadzenDropDown>
                                    </RadzenFormField>
                                </div>
                            </div>
                            <div class="row mt-2">
                                <div class="col-12">
                                    <RadzenFormField Text="Kategoria" Class="w-100">
                                        <RadzenDropDown @bind-Value="data.TicketCategoryID" AllowClear="true" Name="ticketCategory" Class="w-100"
                                                        Data="@ticketsCategory" TextProperty="Name" ValueProperty="ID" AllowVirtualization="true"
                                                        AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                        FilterOperator="StringFilterOperator.Contains">
                                        </RadzenDropDown>
                                    </RadzenFormField>
                                </div>
                            </div>
                            <div class="row mt-2">
                                <div class="col-12">
                                    <RadzenFormField Text="Grupa" Class="w-100">
                                        <RadzenDropDown @bind-Value="data.GroupID" AllowClear="true" Name="group" Class="w-100"
                                                        Data="@groups" TextProperty="Description" ValueProperty="ID" AllowVirtualization="true"
                                                        AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                        FilterOperator="StringFilterOperator.Contains" Change="@(args => { OnGroupsChange(data.GroupID); })">
                                        </RadzenDropDown>
                                    </RadzenFormField>
                                </div>
                            </div>
                            <div class="row mt-2">
                                <div class="col-12">
                                    <RadzenFormField Text="Przydzielone do" Class="w-100">
                                        <RadzenDropDown @bind-Value=@userList Data=@users TextProperty="UserName" ValueProperty="ID" Name="usersList"
                                                        Multiple="true" AllowClear="true" Chips="true" Class="w-100"
                                                        AllowVirtualization="true" MaxSelectedLabels="7" SelectAllText="Wybierz wszystkich" />
                                    </RadzenFormField>
                                </div>
                            </div>
                            <div class="row mt-4">
                                <div class="col-4 text-muted pt-2">
                                        Zadania
                                </div>
                                <div class="col-8">
                                    <RadzenButton Text="0 / 3" ButtonStyle="ButtonStyle.Light" class="w-100" Click="OnTaskClick">
                                    </RadzenButton>
                                </div>
                            </div>
                            <div class="row mt-2">
                                <div class="col-12 text-muted">
                                    <RadzenFormField Text="Data żądana" Class="w-100">
                                        <RadzenDatePicker TValue="DateTime?" Value="@data.RequestedDate" class="w-100" />
                                    </RadzenFormField>
                                </div>
                            </div>
                            <div class="row mt-2">
                                <div class="col-12 text-muted">
                                    <RadzenFormField Text="Planowana data" Class="w-100">
                                        <RadzenDatePicker TValue="DateTime?" Value="@data.PlannedEndDate" class="w-100" />
                                    </RadzenFormField>
                                </div>
                            </div>
                            <div class="row mt-2">
                                <div class="col-12 text-muted">
                                    Lista załączników
                                </div>
                            </div>
                            <div class="row mt-0">
                                <div class="col-12">
                                    <RadzenDataGrid TItem="TicketFilesViewModel" Data="@ticketFiles" Density="Density.Compact" PageSize="24">
                                        <Columns>
                                            <RadzenDataGridColumn TItem="TicketFilesViewModel" Property="ID" Visible="false" />
                                            <RadzenDataGridColumn TItem="TicketFilesViewModel" Property="Extension" Frozen="true" Width="40px">
                                                <Template Context="ticketFiles">
                                                    <img src=@String.Format("images/file_extension/{0}.png", ticketFiles.Extension) />
                                                    <a href="javascript: void(0)" @onclick="(() => ShowImage(ticketFiles.Link))" onmouseover="" class="ms-1">@ticketFiles.FileName</a>
                                                </Template>
                                            </RadzenDataGridColumn>
                                        </Columns>
                                    </RadzenDataGrid>
                                </div>
                            </div>
                            <div class="row mt-2">
                                <div class="col-12">
                                    Czas pracy
                                </div>
                            </div>
                            <div class="row mt-0">
                                <div class="col-12">
                                    <TicketTime TicketID="ID" />
                                </div>
                            </div>
                            <br />
                            <div class="row mt-2">
                                <div class="col-12 fw-bold">
                                    SZCZEGÓŁY ZLECENIODAWACY
                                </div>
                            </div>
                            <div class="row mt-1">
                                <div class="col-12">
                                    -
                                </div>
                            </div>
                            <div class="row mt-1">
                                <div class="col-12">
                                    <RadzenSelectBar TValue="int" Size="ButtonSize.Large" class="w-100 text-center">
                                       <Items>
                                            <RadzenSelectBarItem Value="1" Text="Zasoby w posiadaniu" />
                                            <RadzenSelectBarItem Value="2" Text="Poprzednie zgłoszenia" />
                                       </Items>
                                   </RadzenSelectBar>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int ID { get; set; }

    private TicketDetailsViewModel data;
    private IEnumerable<ActionsViewModel> actions;

    private IEnumerable<TypesOfTicket> typesOfTicket;
    private IEnumerable<Priorities> priorities;
    private IEnumerable<TicketStatusValues> ticketStatusValues;
    private IEnumerable<TicketsCategory> ticketsCategory;
    private IEnumerable<TicketsSource> ticketsSource;

    private IEnumerable<TicketFilesViewModel> ticketFiles;

    private IEnumerable<Groups> groups;
    private IEnumerable<UserGroupsViewModel>? users;

    private IList<int>? userList;
    private string dateGroup = "";
    private int? ticketMenu;
    private int tabsSelectedIndex { get; set; } = 0;

    private List<TicketDetailsMenu> ticketDetailsMenu = new List<TicketDetailsMenu>()
    {
        new TicketDetailsMenu(0, "Dodaj notatkę"),
        new TicketDetailsMenu(1, "Dodaj zadanie"),
        new TicketDetailsMenu(2, "Dodaj czas pracy"),
        new TicketDetailsMenu(3, "Powiel zgłoszenie")
    };

    protected override async Task OnInitializedAsync()
    {
        typesOfTicket = await _httpClient.GetFromJsonAsync<IEnumerable<TypesOfTicket>>($"TypesOfTickets/Select?Status=A");
        priorities = await _httpClient.GetFromJsonAsync<IEnumerable<Priorities>>($"Priorities/Select?Status=A");
        ticketStatusValues = await _httpClient.GetFromJsonAsync<IEnumerable<TicketStatusValues>>($"TicketStatusValues/Select?Status=A");
        ticketsCategory = await _httpClient.GetFromJsonAsync<IEnumerable<TicketsCategory>>($"TicketsCategories/Select?Status=A");
        ticketsSource = await _httpClient.GetFromJsonAsync<IEnumerable<TicketsSource>>($"TicketsSources/Select?Status=A");

        data = await _httpClient.GetFromJsonAsync<TicketDetailsViewModel>($"/api/Tickets/Detail/{ID}");
        var a = await _httpClient.GetFromJsonAsync<IEnumerable<ActionsViewModel>>($"/api/Actions/SelectByTicket/{ID}?Status=A");
        actions = a.OrderByDescending(ob => ob.Date);

        ticketFiles = await _httpClient.GetFromJsonAsync<IEnumerable<TicketFilesViewModel>>($"/api/TicketFiles/SelectByTicket/{ID}?Status=A");

        groups = await _httpClient.GetFromJsonAsync<IEnumerable<Groups>>($"Groups/Select?Status=A");
        users = await _httpClient.GetFromJsonAsync<IEnumerable<UserGroupsViewModel>>($"Users/SelectByGroup/{data.GroupID}?Status=A");

        userList = data.AssignmentUsersID?.Split(';')?.Select(Int32.Parse)?.ToList();
    }

    async Task OnRefresh()
    {
        var a = await _httpClient.GetFromJsonAsync<IEnumerable<ActionsViewModel>>($"/api/Actions/SelectByTicket/{ID}?Status=A");
        actions = a.OrderByDescending(ob => ob.Date);
    }

    private async void OnGroupsChange(int? ID)
    {
        if (ID != null)
        {
            users = Task.Run(async () => await _httpClient.GetFromJsonAsync<IEnumerable<UserGroupsViewModel>>($"Users/SelectByGroup/{ID}?Status=A")).Result;
        }
    }

    void OnTaskClick()
    {
        tabsSelectedIndex = 2;

        base.StateHasChanged();
    }

    async Task OnMenuChange()
    {
        bool answer = true;

        switch (ticketMenu)
        {
            case 0:
                answer = await OnInsertNote();
                break;
            case 1:
                answer = await OnInsertTask();
                break;
            default:
                break;
        }

        ticketMenu = null;

        if (answer)
        {
            await OnRefresh();
        }
    }

    async Task<bool> OnInsertNote()
    {
        bool result = await _dialogService.OpenAsync<note.Insert>("Nowa notatka"
                        , new Dictionary<string, object> { { "TicketID", ID } }
                        , options: new DialogOptions { CloseDialogOnOverlayClick = false, 
                                                           //Position = DialogPosition.Top, 
                                                           //ShowMask = true, 
                                                           Height = "470px", 
                                                           Width = "520px",
                                                           ShowClose = false });

        return result;
    }

    async Task<bool> OnInsertTask()
    {
        bool result = await _dialogService.OpenAsync<task.Insert>("Nowe zadanie"
                        , new Dictionary<string, object> { { "TicketID", ID } }
                        , options: new DialogOptions { CloseDialogOnOverlayClick = false, 
                                                           //Position = DialogPosition.Top,
                                                           //ShowMask = true, 
                                                           Top = "10px",
                                                           Resizable = false,
                                                           Draggable = true,
                                                           Height = "770px",
                                                           Width = "900px",
                                                           ShowClose = false });

        return result;
    }

    async Task OnReply(int ActionID)
    {
        bool result = await _dialogService.OpenAsync<message.Insert>("Nowa wiadomość"
                        , new Dictionary<string, object> { { "TicketID", ID } }
                        , options: new DialogOptions
                            {
                                CloseDialogOnOverlayClick = false,
                                //Position = DialogPosition.Top,
                                //ShowMask = true,
                                Top = "10px",
                                Resizable = false,
                                Draggable = true,
                                Height = "970px",
                                Width = "900px",
                                ShowClose = false
                            });

        if (result)
        {
            await OnRefresh();
        };
    }

    async Task OnReplyAll(int ActionID)
    {

    }

    async Task OnForward(int ActionID)
    {

    }

    async Task OnSend(int ActionID)
    {

    }

    async Task OnEdit(int ActionID, int ActionTypeID)
    {
        bool result = false;

        switch (ActionTypeID)
        {
            case 1:
                result = await _dialogService.OpenAsync<message.Edit>("Popraw wiadomość"
                                , new Dictionary<string, object> { { "ActionID", ActionID } }
                                , options: new DialogOptions
                                    {
                                        CloseDialogOnOverlayClick = false,
                                        //Position = DialogPosition.Top,
                                        //ShowMask = true,
                                        Top = "10px",
                                        Resizable = false,
                                        Draggable = true,
                                        Height = "770px",
                                        Width = "900px",
                                        ShowClose = false
                                    });

                break;
            case 2:
                result = await _dialogService.OpenAsync<note.Edit>("Popraw notatka"
                                , new Dictionary<string, object> { { "ActionID", ActionID } }
                                , options: new DialogOptions
                                    {
                                        CloseDialogOnOverlayClick = false,
                                        //Position = DialogPosition.Top,
                                        //ShowMask = true,
                                        Height = "470px",
                                        Width = "520px",
                                        ShowClose = false
                                    });
                break;
            case 4:
                result = await _dialogService.OpenAsync<task.Edit>("Popraw zadanie"
                                , new Dictionary<string, object> { { "ActionID", ActionID } }
                                , options: new DialogOptions
                                    {
                                        CloseDialogOnOverlayClick = false,
                                        //Position = DialogPosition.Top,
                                        //ShowMask = true,
                                        Top = "10px",
                                        Resizable = false,
                                        Draggable = true,
                                        Height = "770px",
                                        Width = "900px",
                                        ShowClose = false
                                    });
                break;
            default:
                break;
        }

        if (result)
        {
            await OnRefresh();
        };
    }

    async Task OnDelete(int ActionID)
    {
        bool? confirm = false;

        confirm = await _dialogService.Confirm("Jesteś pewny?", "Usuwanie", new ConfirmOptions() { OkButtonText = "Tak", CancelButtonText = "Nie" });

        if ((bool)confirm)
        {
            
        }
    }

    async Task<bool> OnInsertMessage()
    {
        bool result = await _dialogService.OpenSideAsync<message.Insert>("Nowa wiadomość"
                        , new Dictionary<string, object> { { "TicketID", ID } }
                        , options: new SideDialogOptions
                            {
                                CloseDialogOnOverlayClick = false,
                                Position = DialogPosition.Top,
                                ShowMask = true,
                                Width = "670px",
                                ShowClose = false
                            });

        return result;
    }

    async Task ShowImage(string link)
    {
        await _dialogService.OpenAsync<ImageViewer>("Podgląd"
                            , new Dictionary<string, object> { { "link", link } }
                            , options: new DialogOptions
                                {
                                    CloseDialogOnOverlayClick = false,
                                    Width = "1000px",
                                    Height = "800px",
                                    ShowClose = true
                                });
    }

    void OnReturn()
    {
        _navigationManager.NavigateTo("/hd");
    }
}
